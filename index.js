const express = require("express");
const bodyParser = require("body-parser");
const twilio = require("twilio");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: false }));

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

app.post("/webhook", async (req, res) => {
  const from = req.body.From;
  const message = req.body.Body.trim();
  const waNumber = req.body.To;

  if (!sessions[from]) {
    await client.messages.create({
      from: waNumber,
      to: from,
      contentSid: process.env.TEMPLATE_SID,
    });
    sessions[from] = { step: "waiting_for_command" };
    return res.status(200).send();
  }

  const session = sessions[from];

  if (session.step === "waiting_for_command") {
    if (message === "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤") {
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID (–ª–æ–≥–∏–Ω):",
      });
      session.step = "waiting_for_login";
    }

    // –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    if (message === "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏") {
      try {
        await client.messages.create({
          from: waNumber,
          to: from,
          contentSid: "HXc07f9a56c952dd93c5a4308883e00a7e", // catalog_options_new
        });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —à–∞–±–ª–æ–Ω–∞:", err.message);
        await client.messages.create({
          from: waNumber,
          to: from,
          body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        });
      }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
    if (message === "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤") {
      await sendPDF(
        waNumber,
        from,
        "üßæ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤üì•",
        "https://organicstore151.github.io/whatsapp-catalog/catalog.pdf"
      );
    }

    if (message === "–ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è") {
      await sendPDF(
        waNumber,
        from,
        "ü©∫ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—éüì•",
        "https://organicstore151.github.io/comples/complex.pdf"
      );
    }

    if (message === "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç") {
      await sendPDF(
        waNumber,
        from,
        "üí∞ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–ºüì•",
        "https://organicstore151.github.io/price/price.pdf"
      );
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  else if (session.step === "waiting_for_login") {
    session.login = message;
    session.step = "waiting_for_password";
    await client.messages.create({
      from: waNumber,
      to: from,
      body: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
    });
  }

  else if (session.step === "waiting_for_password") {
    session.password = message;
    session.step = "done";

    try {
      const authResponse = await axios.post(
        "https://lk.peptides1.ru/api/auth/sign-in",
        {
          login: session.login,
          password: session.password,
        }
      );

      const token = authResponse.data.token;

      const bonusResponse = await axios.get(
        "https://lk.peptides1.ru/api/partners/current/closing-info",
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const bonusAmount = bonusResponse.data.current.balance[0].amount;

      await client.messages.create({
        from: waNumber,
        to: from,
        body: `üéâ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bonusAmount} —Ç–≥`,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.message);
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
      });
    }

    delete sessions[from];
    return res.status(200).send();
  }

  return res.status(200).send();
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
async function sendPDF(from, to, caption, mediaUrl) {
  try {
    await client.messages.create({
      from,
      to,
      body: caption,
      mediaUrl: [mediaUrl],
    });
    console.log("PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", mediaUrl);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF:", err.message);
    await client.messages.create({
      from,
      to,
      body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  }
}

app.get("/", (req, res) => {
  res.send("‚úÖ WhatsApp –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç");
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

const sendTestNewsletter = async () => {
  try {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const authResponse = await axios.post("https://lk.peptides1.ru/api/auth/sign-in", {
      login: process.env.LOGIN,
      password: process.env.PASSWORD,
    });

    const token = authResponse.data.token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const partnersResponse = await axios.get(
      "https://lk.peptides1.ru/api/dealers/231253/partners?with_side_volume=true&limit=100&offset=0",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    const partners = partnersResponse.data;

    // –ò—â–µ–º –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä
    const targetPhone = "77057633896";
    const target = partners.find((p) => p.phone === targetPhone);

    if (target) {
      const balance = target.account_balance;
      const fullName = `${target.first_name} ${target.middle_name}`.trim();

      await client.messages.create({
        from: process.env.TWILIO_WHATSAPP_NUMBER,
        to: `whatsapp:+${targetPhone}`,
        body: `üéÅ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${fullName}! –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${balance} —Ç–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ Peptides!`,
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${targetPhone} (${fullName}), –±–∞–ª–∞–Ω—Å: ${balance}`);
    } else {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", error.message);
  }
};

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
sendTestNewsletter();

