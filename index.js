const express = require("express");
const bodyParser = require("body-parser");
const twilio = require("twilio");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: false }));

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

app.post("/webhook", async (req, res) => {
  const from = req.body.From;
  const message = req.body.Body.trim();
  const waNumber = req.body.To;

  // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Twilio (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–û–ö")
  res.send('<Response></Response>');

  if (!sessions[from]) {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω
    await client.messages.create({
      from: waNumber,
      to: from,
      contentSid: process.env.TEMPLATE_SID,
    });
    sessions[from] = { step: "waiting_for_command" };
    return;
  }

  const session = sessions[from];

  if (session.step === "waiting_for_command") {
    if (message === "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤") {
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID (–ª–æ–≥–∏–Ω):",
      });
      session.step = "waiting_for_login";
    }
  } else if (session.step === "waiting_for_login") {
    session.login = message;
    session.step = "waiting_for_password";
    await client.messages.create({
      from: waNumber,
      to: from,
      body: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
    });
  } else if (session.step === "waiting_for_password") {
    session.password = message;
    session.step = "done";

    try {
      // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å: –ª–æ–≥–∏–Ω + –ø–∞—Ä–æ–ª—å => –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å –±–∞–ª–∞–Ω—Å–æ–º
      const response = await axios.post(
        "https://lk.peptides1.ru/api/auth/sign-in",
        {
          login: session.login,
          password: session.password,
        }
      );

      const bonus = response.data.current.balance[0].amount;

      await client.messages.create({
        from: waNumber,
        to: from,
        body: `üéâ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bonus} ‚ÇΩ`,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.message);
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
      });
    }

    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    delete sessions[from];
  }
});

app.get("/", (req, res) => {
  res.send("‚úÖ WhatsApp –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç");
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
