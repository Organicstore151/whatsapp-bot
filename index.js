} else if (session.step === "waiting_for_password") {
  session.password = message;
  session.step = "done";

  try {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–≤–æ–º—É API
    const authResponse = await axios.post(
      "https://lk.peptides1.ru/api/auth/sign-in",
      {
        login: session.login,
        password: session.password,
      }
    );

    const token = authResponse.data.token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const userResponse = await axios.get(
      "https://lk.peptides1.ru/api/user/info",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    const bonus = userResponse.data.current.balance[0].amount;

    await client.messages.create({
      from: waNumber,
      to: from,
      body: `üéâ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bonus} ‚ÇΩ`,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.message);
    await client.messages.create({
      from: waNumber,
      to: from,
      body: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
    });
  }

  delete sessions[from];
}
