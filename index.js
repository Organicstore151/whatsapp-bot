const express = require("express");
const bodyParser = require("body-parser");
const twilio = require("twilio");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const { ChartJSNodeCanvas } = require("chartjs-node-canvas");
const cron = require("node-cron");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
const sessions = {};

// ‚úÖ 1. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function logUserAction(from, step, message) {
  const logLine = `[${new Date().toISOString()}] ${from} | ${step} | ${message}\n`;
  const logPath = path.join(__dirname, "user_behavior.log");

  fs.access(logPath, fs.constants.F_OK, (err) => {
    if (err) {
      fs.writeFile(logPath, "", (err) => {
        if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err.message);
        else console.log("üìù –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.");
      });
    }
  });

  fs.appendFile(logPath, logLine, (err) => {
    if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", err.message);
    else console.log("üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω:", logLine.trim());
  });
}

// ‚úÖ 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
async function analyzeUserBehavior() {
  const logFile = path.join(__dirname, "user_behavior.log");
  if (!fs.existsSync(logFile)) return;

  const data = fs.readFileSync(logFile, "utf-8");
  const lines = data.trim().split("\n");
  const stepCounts = {};

  for (const line of lines) {
    const match = line.match(/\| (.*?) \|/);
    if (match) {
      const step = match[1].trim();
      stepCounts[step] = (stepCounts[step] || 0) + 1;
    }
  }

  const steps = Object.keys(stepCounts);
  const counts = steps.map((step) => stepCounts[step]);

  const chartCanvas = new ChartJSNodeCanvas({ width: 800, height: 600 });
  const configuration = {
    type: "bar",
    data: {
      labels: steps,
      datasets: [{
        label: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ",
        data: counts,
        backgroundColor: "rgba(75, 192, 192, 0.6)",
      }],
    },
    options: {
      responsive: false,
      plugins: {
        title: {
          display: true,
          text: "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WhatsApp-–±–æ—Ç–∞",
          font: { size: 20 }
        },
        legend: {
          display: false,
        },
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    },
  };

  const buffer = await chartCanvas.renderToBuffer(configuration);
  const outputPath = path.join(__dirname, "chart.png");
  fs.writeFileSync(outputPath, buffer);
  console.log("üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ chart.png");
}

// ‚úÖ 3. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –≤ 23:59
cron.schedule("59 23 * * *", async () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤...");
  await analyzeUserBehavior();
});

app.post("/webhook", async (req, res) => {
  const from = req.body.From;
  const message = (req.body.Body || "").trim();
  const mediaUrl = req.body.MediaUrl0;

  if (!sessions[from]) {
    await client.messages.create({
      to: from,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      contentSid: process.env.TEMPLATE_SID,
    });
    sessions[from] = { step: "waiting_for_command" };
    logUserAction(from, "new_user", message);
    return res.status(200).send();
  }

  const session = sessions[from];
  logUserAction(from, session.step, message);

  if (mediaUrl) {
    session.recipeImage = mediaUrl;
    await client.messages.create({
      to: from,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: "üì∏ –§–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.",
    });
  }

  if (session.step === "waiting_for_command") {
    if (message === "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤") {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID (–ª–æ–≥–∏–Ω):",
      });
      session.step = "waiting_for_login";
    } else if (message === "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏") {
      try {
        await client.messages.create({
          to: from,
          messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
          contentSid: "HXc07f9a56c952dd93c5a4308883e00a7e",
        });
      } catch (err) {
        await client.messages.create({
          to: from,
          messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
          body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        });
      }
    } else if (message === "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤") {
      await sendPDF(from, "üßæ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤üì•", "https://organicstore151.github.io/whatsapp-catalog/catalog.pdf");
    } else if (message === "–ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è") {
      await sendPDF(from, "ü©∫ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—éüì•", "https://organicstore151.github.io/comples/complex.pdf");
    } else if (message === "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç") {
      await sendPDF(from, "üí∞ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–ºüì•", "https://organicstore151.github.io/price/price.pdf");
    } else if (message === "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑") {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "*üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ ID –∫–ª–∏–µ–Ω—Ç–∞.*",
      });
      session.step = "waiting_for_name";
    } else if (message === "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º") {
      const managerLink = "https://wa.me/77774991275?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: `üí¨ –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:\n${managerLink}`,
      });
    } else {
      session.step = "unrecognized_input";
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n1Ô∏è‚É£ ‚Äî –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n2Ô∏è‚É£ ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É",
      });
    }
  }

  else if (session.step === "unrecognized_input") {
    if (message === "1") {
      const managerLink = "https://wa.me/77774991275?text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: `üí¨ –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ:\n${managerLink}`,
      });
      session.step = "waiting_for_command";
    } else if (message === "2") {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        contentSid: process.env.TEMPLATE_SID,
      });
      session.step = "waiting_for_command";
    } else {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ:\n1Ô∏è‚É£ ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä\n2Ô∏è‚É£ ‚Äî –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
      });
    }
  }

  else if (session.step === "waiting_for_login") {
    session.login = message;
    session.step = "waiting_for_password";
    await client.messages.create({
      to: from,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
    });
  }

  else if (session.step === "waiting_for_password") {
    session.password = message;
    session.step = "done";

    try {
      const authResponse = await axios.post("https://lk.peptides1.ru/api/auth/sign-in", {
        login: session.login,
        password: session.password,
      });

      const token = authResponse.data.token;
      const bonusResponse = await axios.get(
        "https://lk.peptides1.ru/api/partners/current/closing-info",
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const bonusAmount = bonusResponse.data?.current?.balance?.[0]?.amount ?? null;

      if (bonusAmount !== null) {
        await client.messages.create({
          to: from,
          messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
          body: `üéâ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bonusAmount} —Ç–≥`,
        });
      } else {
        await client.messages.create({
          to: from,
          messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
          body: "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å.",
        });
      }
    } catch (err) {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
      });
    }

    delete sessions[from];
    return res.status(200).send();
  }

  else if (session.step === "waiting_for_name") {
    session.name = message;
    session.step = "waiting_for_items";
    await client.messages.create({
      to: from,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: "*‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.*",
    });
  }

  else if (session.step === "waiting_for_items") {
    session.items = message;
    session.step = "waiting_for_address";
    await client.messages.create({
      to: from,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: "*üì¶ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*",
    });
  }

  else if (session.step === "waiting_for_address") {
    session.address = message;

    const orderText = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\nüë§ –§–ò–û: ${session.name}\nüìã –ü—Ä–µ–ø–∞—Ä–∞—Ç—ã: ${session.items}\nüè† –ê–¥—Ä–µ—Å: ${session.address}\nüìû –û—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${from}\nüñºÔ∏è –§–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞: ${session.recipeImage || "–ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ"}`;

    try {
      await client.messages.create({
        from: "whatsapp:+77718124038",
        to: "whatsapp:+77774991275",
        body: orderText,
      });

      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.",
      });
    } catch (err) {
      await client.messages.create({
        to: from,
        messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
        body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
      });
    }

    delete sessions[from];
    return res.status(200).send();
  }

  return res.status(200).send();
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
async function sendPDF(to, caption, mediaUrl) {
  try {
    await client.messages.create({
      to,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: caption,
      mediaUrl: [mediaUrl],
    });
    console.log("üì§ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", mediaUrl);
  } catch (err) {
    await client.messages.create({
      to,
      messagingServiceSid: process.env.MESSAGING_SERVICE_SID,
      body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  }
}

app.listen(PORT, () => {
  console.log(`üëÇ –°–ª—É—à–∞—é –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
