const express = require("express");
const bodyParser = require("body-parser");
const twilio = require("twilio");
const axios = require("axios");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: false }));

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const sessions = {};

app.post("/webhook", async (req, res) => {
  const from = req.body.From;
  const message = req.body.Body.trim();
  const waNumber = req.body.To;

  if (!sessions[from]) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —à–∞–±–ª–æ–Ω–æ–º
    await client.messages.create({
      from: waNumber,
      to: from,
      contentSid: process.env.TEMPLATE_SID,
    });
    sessions[from] = { step: "waiting_for_command" };
    return res.status(200).send();
  }

  const session = sessions[from];

  if (session.step === "waiting_for_command") {
    if (message === "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤") {
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID (–ª–æ–≥–∏–Ω):",
      });
      session.step = "waiting_for_login";
    }

    // üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤" ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF
    if (message === "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤") {
      console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤'. –û—Ç–ø—Ä–∞–≤–∫–∞ PDF...");
      try {
        await client.messages.create({
          from: waNumber,
          to: from,
          body: "üìò –í–æ—Ç –Ω–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ:",
          mediaUrl: ['https://drive.google.com/uc?export=download&id=1PlfNYjfZStMz02kXTbdsr8HnaRBusvV5'], // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        });
        console.log("–ö–∞—Ç–∞–ª–æ–≥ PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF –∫–∞—Ç–∞–ª–æ–≥–∞:", err.message);
        await client.messages.create({
          from: waNumber,
          to: from,
          body: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        });
      }
    }
  }

  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–µ–º –ª–æ–≥–∏–Ω
  else if (session.step === "waiting_for_login") {
    session.login = message;
    session.step = "waiting_for_password";
    await client.messages.create({
      from: waNumber,
      to: from,
      body: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
    });
  } else if (session.step === "waiting_for_password") {
    session.password = message;
    session.step = "done";

    try {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      const authResponse = await axios.post(
        "https://lk.peptides1.ru/api/auth/sign-in",
        {
          login: session.login,
          password: session.password,
        }
      );

      const token = authResponse.data.token;

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö
      const bonusResponse = await axios.get(
        "https://lk.peptides1.ru/api/partners/current/closing-info",
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const bonusAmount = bonusResponse.data.current.balance[0].amount;

      await client.messages.create({
        from: waNumber,
        to: from,
        body: `üéâ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${bonusAmount} —Ç–≥`,
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err.message);
      await client.messages.create({
        from: waNumber,
        to: from,
        body: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.",
      });
    }

    delete sessions[from];
    return res.status(200).send();
  }

  return res.status(200).send();
});

app.get("/", (req, res) => {
  res.send("‚úÖ WhatsApp –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç");
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
