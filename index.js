const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");  // axios –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Meta API
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

app.get("/", (req, res) => {
  res.send("–ü—Ä–∏–≤–µ—Ç! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç.");
});


const sessions = {};

const logPath = path.join(__dirname, "user_behavior.log");

function logUserAction(from, step, message) {
  const data = {
    date: new Date().toISOString(),
    phone: from,
    step,
    message,
  };

  axios
    .post("https://script.google.com/macros/s/AKfycbyBfgnmgHoklSrxyvkRlVyVDJI960l4BNK8fzWxctoVTTXaVzshADG2ZR6rm-7GBxT02Q/exec", data)
    .then(() => console.log("üì§ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É"))
    .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", err.message));

  const logLine = `${data.date} | ${data.phone} | ${data.step} | ${data.message}\n`;

  fs.access(logPath, fs.constants.F_OK, (err) => {
    if (err) {
      fs.writeFile(logPath, logLine, (err) => {
        if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err.message);
        else console.log("üìù –§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω –∏ –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω.");
      });
    } else {
      fs.appendFile(logPath, logLine, (err) => {
        if (err) console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥:", err.message);
        else console.log("üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω:", logLine.trim());
      });
    }
  });
}

const sendMessageToMeta = async (to, message) => {
  try {
    const response = await axios.post(`https://graph.facebook.com/v16.0/${process.env.PHONE_NUMBER_ID}/messages`, {
      messaging_product: "whatsapp",
      to: to,
      type: "text",
      text: { body: message },
    }, {
      headers: {
        Authorization: `Bearer ${process.env.META_ACCESS_TOKEN}`,
      },
    });
    console.log("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", message);
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Meta API:", response.data);
  } catch (err) {
    if (err.response) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—à–∏–±–∫–∏
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.response.data);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err.message);
    }
  }
};
app.get("/webhook", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  // –í–∞—à —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞ –≤ Meta)
  const VERIFY_TOKEN = process.env.VERIFY_TOKEN;

  if (mode && token) {
    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      console.log("‚úÖ –í–µ–±—Ö—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!");
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º challenge –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Ç–≤–µ—Ç
      res.status(200).send(challenge);
    } else {
      console.log("‚ùå –¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
      res.sendStatus(403);
    }
  } else {
    res.sendStatus(400);
  }
});
app.post("/webhook", async (req, res) => {
  console.log("üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", req.body);

  const from = req.body.From;
  const message = (req.body.Body || "").trim();
  const mediaUrl = req.body.MediaUrl0;

  if (!sessions[from]) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
    await sendMessageToMeta(from, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    sessions[from] = { step: "waiting_for_command" };

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logUserAction(from, "new_user", message);

    return res.status(200).send();
  }

  const session = sessions[from];
  logUserAction(from, session.step, message);

  if (mediaUrl) {
    session.recipeImage = mediaUrl;
    await sendMessageToMeta(from, "üì∏ –§–æ—Ç–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.");
  }

  if (session.step === "waiting_for_command") {
    if (message === "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤") {
      await sendMessageToMeta(from, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à ID (–ª–æ–≥–∏–Ω):");
      session.step = "waiting_for_login";
    } else if (message === "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏") {
      await sendMessageToMeta(from, "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏...");
    } else if (message === "–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤") {
      await sendPDF(from, "üßæ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤üì•", "https://organicstore151.github.io/whatsapp-catalog/catalog.pdf");
    } else if (message === "–ö—É—Ä—Å –ª–µ—á–µ–Ω–∏—è") {
      await sendPDF(from, "ü©∫ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—éüì•", "https://organicstore151.github.io/comples/complex.pdf");
    } else if (message === "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç") {
      await sendPDF(from, "üí∞ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–ºüì•", "https://organicstore151.github.io/price/price.pdf");
    } else {
      session.step = "unrecognized_input";
      await sendMessageToMeta(from, "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:\n1Ô∏è‚É£ ‚Äî –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n2Ô∏è‚É£ ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
    }
  } else if (session.step === "waiting_for_login") {
    session.login = message;
    session.step = "waiting_for_password";
    await sendMessageToMeta(from, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
  }

  return res.status(200).send();
});

const sendPDF = async (to, caption, mediaUrl) => {
  try {
    await axios.post(`https://graph.facebook.com/v16.0/${process.env.WHATSAPP_BUSINESS_ACCOUNT_ID}/messages`, {
      messaging_product: "whatsapp",
      to: to,
      text: { body: caption },
      media: { link: mediaUrl },
    }, {
      headers: {
        Authorization: `Bearer ${process.env.META_ACCESS_TOKEN}`,
      },
    });
    console.log("üì§ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", mediaUrl);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF —á–µ—Ä–µ–∑ Meta API:", err.message);
  }
};

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
