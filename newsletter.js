const axios = require("axios");
const twilio = require("twilio");
require("dotenv").config();

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

const login = process.env.PEPTIDES_LOGIN;
const password = process.env.PEPTIDES_PASSWORD;

const sendMessage = async (phone, firstName, middleName, balance) => {
  const fullName = `${firstName} ${middleName}`.trim();

  const body = `üéâ ${fullName}, –Ω–∞ –≤–∞—à–µ–º –±–æ–Ω—É—Å–Ω–æ–º —Å—á–µ—Ç–µ ${balance} —Ç–≥. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ Peptides.`;

  try {
    const message = await client.messages.create({
      from: process.env.TWILIO_PHONE_NUMBER,
      to: `+${phone}`,
      body: body,
    });

    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${phone}: ${message.sid}`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ ${phone}:`, err.message);
  }
};

const run = async () => {
  try {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const authResponse = await axios.post("https://lk.peptides1.ru/api/auth/sign-in", {
      login,
      password,
    });

    const token = authResponse.data.token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    const partnersResponse = await axios.get(
      "https://lk.peptides1.ru/api/dealers/231253/partners?with_side_volume=true&limit=100&offset=0",
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    const users = partnersResponse.data.items;

    // –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const user = users.find((u) => u.phone === "77057633896");

    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.first_name} ${user.middle_name}`);
    console.log(`üí∞ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${user.account_balance} —Ç–≥`);

    await sendMessage(user.phone, user.first_name, user.middle_name, user.account_balance);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", err.message);
  }
};

run();
